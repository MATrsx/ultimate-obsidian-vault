{
	"nodes":[
		{"id":"32d688a2769c78bd","type":"text","text":"# Area Cards\n> [!blank-container|cards] Title\n> ```dataviewjs\n> dv.table([\"Cover\", \"Name\", \"Related Notes\", \"Created\"],\n>     dv.pages()\n>     .filter(p => p.file.path.startsWith(\"03 - Areas/\"))\n>     .map(p => {\n>         let banner = p.banner ? p.banner : \"\";\n>         let cover = banner ? dv.paragraph(`!${banner}`) : dv.paragraph(`![[pixel-image.png|100x80]]`);\n>         let relatedNotes = `*Related Notes*: **${p.file.inlinks.length}**`;\n>         console.log(p.file.frontmatter);\n>         \n>         const tasks = p.file.tasks || [];\n> \t    const totalTasks = tasks.length;\n> \t    const completedTasks = tasks.filter(t => t.completed).length;\n>         let relatedTasks = totalTasks > 0 ? `*Completed Tasks*: ${completedTasks}/${totalTasks}` : `*Linked Tasks*: ${totalTasks}`\n> \n> \t\tconst goals = dv.pages()\n> \t\t    .filter(p => p.file.path.startsWith(\"01 - Journal/10 - Goals\"))\n>             .where(g => g.file.outlinks.some(l => l.path === p.file.path)) || [];\n> \t    const totalGoals = goals.length;\n> \t    const completedGoals = goals.filter(t => t.status === \"done\").length;\n>         let relatedGoalsCount = totalGoals > 0 ? `*Completed Goals*: ${completedGoals}/${totalGoals}` : `*Related Goals*: ${totalGoals}`\n> \t\tlet relatedGoals = totalGoals > 0 ? \"**View Goals** \\n\" + dv.pages()\n> \t\t    .filter(p => p.file.path.startsWith(\"01 - Journal/10 - Goals\"))\n>             .where(g => g.file.outlinks.some(l => l.path === p.file.path))\n>             .map(g => g.file.link)\n>             .join(\", \") : null;\n>                 \n>         let returnElements = [cover, p.file.link, relatedNotes, relatedTasks, relatedGoalsCount];\n>         totalGoals > 0 ? returnElements.push(relatedGoals) : \"\";\n>         return returnElements;\n>     })\n> );\n> ```\n","x":-960,"y":-460,"width":520,"height":980},
		{"id":"616089b74d095774","type":"text","text":"# Project Cards\n> [!blank-container|cards] Title\n> ```dataviewjs\n> dv.table([\"Cover\", \"Name\", \"Related Notes\", \"Created\"],\n>     dv.pages()\n>     .filter(p => p.file.path.startsWith(\"02 - Projects/\"))\n>     .map(p => {\n>         let banner = p.banner ? p.banner : \"\";\n>         let cover = banner ? dv.paragraph(`!${banner}`) : dv.paragraph(`![[pixel-image.png|100x80]]`);\n>         let relatedNotes = `*Related Notes*: **${p.file.inlinks.length}**`;\n>         console.log(p.file.frontmatter);\n>         \n>         const tasks = p.file.tasks || [];\n> \t    const totalTasks = tasks.length;\n> \t    const completedTasks = tasks.filter(t => t.completed).length;\n>         let relatedTasks = totalTasks > 0 ? `*Completed Tasks*: ${completedTasks}/${totalTasks}` : `*Linked Tasks*: ${totalTasks}`\n> \n> \t\tconst goals = dv.pages()\n> \t\t    .filter(p => p.file.path.startsWith(\"01 - Journal/10 - Goals\"))\n>             .where(g => g.file.outlinks.some(l => l.path === p.file.path)) || [];\n> \t    const totalGoals = goals.length;\n> \t    const completedGoals = goals.filter(t => t.status === \"done\").length;\n>         let relatedGoalsCount = totalGoals > 0 ? `*Completed Goals*: ${completedGoals}/${totalGoals}` : `*Related Goals*: ${totalGoals}`\n> \t\tlet relatedGoals = totalGoals > 0 ? \"**View Goals** \\n\" + dv.pages()\n> \t\t    .filter(p => p.file.path.startsWith(\"01 - Journal/10 - Goals\"))\n>             .where(g => g.file.outlinks.some(l => l.path === p.file.path))\n>             .map(g => g.file.link)\n>             .join(\", \") : null;\n>                 \n>         let returnElements = [cover, p.file.link, relatedNotes, relatedTasks, relatedGoalsCount];\n>         totalGoals > 0 ? returnElements.push(relatedGoals) : \"\";\n>         return returnElements;\n>     })\n> );\n> ```\n","x":-380,"y":-460,"width":380,"height":980},
		{"id":"5005ce67539c14f9","type":"text","text":"# All PDF Files\n> [!blank-container|cards] Title\n> ```dataview\n> TABLE file.name as \"Filename\"\n> FROM \"09 - Meta\"\n> WHERE endswith(file.name, \".pdf\")\n> ```\n","x":80,"y":-460,"width":380,"height":980},
		{"id":"c53c8ccbb2a00302","type":"text","text":"# Daily Notes Calendar\n```dataview\nCALENDAR file.day\nFROM \"01 - Journal/11 - Daily\"\n```\n","x":-960,"y":640,"width":600,"height":440},
		{"id":"4c60d155bcc80c7e","type":"text","text":"# Notes Creation Date Calendar\n```dataview\nCALENDAR file.ctime \n```","x":-960,"y":1140,"width":600,"height":440},
		{"id":"64559effbc2f90af","type":"text","text":"# List unresolved Links\n```dataviewjs\nlet result = {};\n\nfunction process(referingFile, unresolvedLinks) {\n  Object.keys(unresolvedLinks).forEach(function (link) {\n    link = dv.fileLink(link);\n    if (!result[link]) result[link] = [];\n\n    result[link].push(dv.fileLink(referingFile));\n  });\n}\n\nObject.entries(dv.app.metadataCache.unresolvedLinks)\n  .filter(([referingFile]) => {\n    return !referingFile.startsWith(\"09 - Meta\") && !referingFile.startsWith(\"01 - Journal\")\n  })\n  .forEach(([referingFile, unresolvedLink]) => process(referingFile, unresolvedLink));\n\n\nconst rows = Object.entries(result)\n    .map(([unresolvedLink, referingFiles]) => [unresolvedLink, referingFiles])\n    .sort((a, b) => a[0] > b[0] ? 1 : -1)\n\ndv.table(\n    [\"Unresolved Link\", \"Contained in\"],\n\trows\n);\n```","x":-284,"y":640,"width":744,"height":940},
		{"id":"4e24cd91c3174800","x":526,"y":-460,"width":514,"height":980,"type":"text","text":"# Unsorted Attachments\n\n```dataviewjs\nconst basePath = \"09 - Meta/91 - Attachments/\";\nconst correctFolders = {\n    \"Audio\": [\".mp3\", \".wav\", \".flac\", \".aac\", \".ogg\"],\n    \"Video\": [\".mp4\", \".mov\", \".avi\", \".mkv\", \".webm\"],\n    \"PDFs\": [\".pdf\"],\n    \"Images\": [\".jpg\", \".jpeg\", \".png\", \".gif\", \".bmp\", \".svg\", \".webp\"]\n};\n\n\ndv.table([\"File\", \"Target-Directory\", \"Action\"],\n     app.vault.getFiles()\n     .filter(f => f.path.startsWith(basePath) && !f.path.includes(\"/Audio\") && !f.path.includes(\"/Video\") && !f.path.includes(\"/PDFs\") && !f.path.includes(\"/Images\"))\n     .map(f => {\n        let extension = f.path.split('.').pop().toLowerCase();\n\t    let targetFolder = null;\n\t\n\t    // Den passenden Ordner anhand der Endung ermitteln\n\t    for (const [folder, extensions] of Object.entries(correctFolders)) {\n\t        if (extensions.includes(\".\" + extension)) {\n\t            targetFolder = basePath + folder + \"/\" + f.path.split('/').pop();\n\t            break;\n\t        }\n\t    }\n\t    \n\t    return [\n\t\t    dv.paragraph(`[[${f.path}]]`), \n\t\t    targetFolder, \n\t\t    `<button id=\"move-btn\" data-from=\"${f.path}\" data-to=\"${targetFolder}\">Move</button>`\n\t    ];\n     })\n );\n\nsetTimeout(() => {\n    document.querySelectorAll(\"button[id^='move-btn']\").forEach(btn => {\n        btn.addEventListener(\"click\", async () => {\n            let from = btn.getAttribute(\"data-from\");\n            let to = btn.getAttribute(\"data-to\");\n\n            try {\n            console.log(from, to)\n\t            const file = app.vault.getAbstractFileByPath(from);\n                await app.fileManager.renameFile(file, to);\n                btn.textContent = \"Moved ✔\";\n                btn.disabled = true;\n            } catch (error) {\n                btn.textContent = \"Error ❌\";\n                console.error(\"An error occurred:\", error);\n            }\n        });\n    });\n}, 500);\n```\n\n"}
	],
	"edges":[]
}